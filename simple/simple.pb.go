// Code generated by protoc-gen-go.
// source: simple.proto
// DO NOT EDIT!

/*
Package simple is a generated protocol buffer package.

It is generated from these files:
	simple.proto

It has these top-level messages:
	Number
*/
package simple

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Number struct {
	Num int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *Number) Reset()         { *m = Number{} }
func (m *Number) String() string { return proto.CompactTextString(m) }
func (*Number) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Simple service

type SimpleClient interface {
	Echo(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Number, error)
	Count(ctx context.Context, in *Number, opts ...grpc.CallOption) (Simple_CountClient, error)
	Sum(ctx context.Context, opts ...grpc.CallOption) (Simple_SumClient, error)
	EchoStream(ctx context.Context, opts ...grpc.CallOption) (Simple_EchoStreamClient, error)
}

type simpleClient struct {
	cc *grpc.ClientConn
}

func NewSimpleClient(cc *grpc.ClientConn) SimpleClient {
	return &simpleClient{cc}
}

func (c *simpleClient) Echo(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := grpc.Invoke(ctx, "/simple.Simple/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) Count(ctx context.Context, in *Number, opts ...grpc.CallOption) (Simple_CountClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Simple_serviceDesc.Streams[0], c.cc, "/simple.Simple/Count", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Simple_CountClient interface {
	Recv() (*Number, error)
	grpc.ClientStream
}

type simpleCountClient struct {
	grpc.ClientStream
}

func (x *simpleCountClient) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleClient) Sum(ctx context.Context, opts ...grpc.CallOption) (Simple_SumClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Simple_serviceDesc.Streams[1], c.cc, "/simple.Simple/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleSumClient{stream}
	return x, nil
}

type Simple_SumClient interface {
	Send(*Number) error
	CloseAndRecv() (*Number, error)
	grpc.ClientStream
}

type simpleSumClient struct {
	grpc.ClientStream
}

func (x *simpleSumClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleSumClient) CloseAndRecv() (*Number, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleClient) EchoStream(ctx context.Context, opts ...grpc.CallOption) (Simple_EchoStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Simple_serviceDesc.Streams[2], c.cc, "/simple.Simple/EchoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleEchoStreamClient{stream}
	return x, nil
}

type Simple_EchoStreamClient interface {
	Send(*Number) error
	Recv() (*Number, error)
	grpc.ClientStream
}

type simpleEchoStreamClient struct {
	grpc.ClientStream
}

func (x *simpleEchoStreamClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleEchoStreamClient) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Simple service

type SimpleServer interface {
	Echo(context.Context, *Number) (*Number, error)
	Count(*Number, Simple_CountServer) error
	Sum(Simple_SumServer) error
	EchoStream(Simple_EchoStreamServer) error
}

func RegisterSimpleServer(s *grpc.Server, srv SimpleServer) {
	s.RegisterService(&_Simple_serviceDesc, srv)
}

func _Simple_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SimpleServer).Echo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Simple_Count_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Number)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleServer).Count(m, &simpleCountServer{stream})
}

type Simple_CountServer interface {
	Send(*Number) error
	grpc.ServerStream
}

type simpleCountServer struct {
	grpc.ServerStream
}

func (x *simpleCountServer) Send(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func _Simple_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServer).Sum(&simpleSumServer{stream})
}

type Simple_SumServer interface {
	SendAndClose(*Number) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type simpleSumServer struct {
	grpc.ServerStream
}

func (x *simpleSumServer) SendAndClose(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleSumServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Simple_EchoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServer).EchoStream(&simpleEchoStreamServer{stream})
}

type Simple_EchoStreamServer interface {
	Send(*Number) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type simpleEchoStreamServer struct {
	grpc.ServerStream
}

func (x *simpleEchoStreamServer) Send(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleEchoStreamServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Simple_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simple.Simple",
	HandlerType: (*SimpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Simple_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Count",
			Handler:       _Simple_Count_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sum",
			Handler:       _Simple_Sum_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoStream",
			Handler:       _Simple_EchoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
